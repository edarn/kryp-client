using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

using MySql.Data;
using MySql.Data.MySqlClient;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data.Common;
using System.Web.Configuration;

namespace DataBaseEntities
{
    public class WindData
    {
        bool isMySqlDB = false;

	    public WindData(bool isMySQL)
	    {
            isMySqlDB = isMySQL;
	    }

        string GetMySqlConnStr()
        {
            return WebConfigurationManager.ConnectionStrings["mySqlConnStr"].ConnectionString;
        }

        string GetSQLConnStr()
        {
            return WebConfigurationManager.ConnectionStrings["sqlServerConnStr"].ConnectionString;
        }

        public string GetDBConnString()
        {
            return isMySqlDB ? GetMySqlConnStr() : GetSQLConnStr();
        }

        DbCommand GetDBCommand(string cmd, DbConnection conn) 
        {
            return isMySqlDB ? (DbCommand)new MySqlCommand(cmd, (MySqlConnection)conn) : (DbCommand)new SqlCommand(cmd, (SqlConnection)conn);
        }

        DbConnection GetDbConnection(string connStr)
        {
            return isMySqlDB ? (DbConnection)new MySqlConnection(connStr) : (DbConnection)new SqlConnection(connStr);
        }

        DbParameter GetDBParam(string paramName, object paramValue)
        {
            return isMySqlDB ? (DbParameter)new MySqlParameter("?" + paramName, paramValue) : (DbParameter)new SqlParameter("@" + paramName, paramValue);
        }

        public List<WindRecord> GetFullList()
        {
            string cmdText = "select * from test_data order by time";            
            using (DbConnection conn = GetDbConnection(GetDBConnString()))
            {                                
                conn.Open();
                List<WindRecord> list = new List<WindRecord>();
                using (DbCommand cmd = GetDBCommand(cmdText, conn))
                {
                    DbDataReader reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        WindRecord wr = new WindRecord();
                        wr.Time = Convert.ToDateTime(reader["time"]);
                        wr.AverageDirection = int.Parse(reader["averageDir"].ToString());
                        wr.MaxDirection = int.Parse(reader["maxDir"].ToString());
                        wr.MinDirection = int.Parse(reader["minDir"].ToString());
                        wr.AverageSpeed = float.Parse(reader["averageSpeed"].ToString());
                        wr.MaxSpeed = float.Parse(reader["maxSpeed"].ToString());
                        wr.MinSpeed = float.Parse(reader["minSpeed"].ToString());
                        list.Add(wr);
                    }
                }
                return list;
            }
            return null;
        }

        public List<WindRecord> GetListBetweenDate(DateTime startDate, DateTime endDate)
        {
            string cmdText = string.Format("select * from test_data where time between {0} order by time desc", (isMySqlDB ? "?start and ?end" : "@start and @end"));
            using (DbConnection conn = GetDbConnection(GetDBConnString()))
            {
                List<WindRecord> list = new List<WindRecord>();
                conn.Open();
                using (DbCommand cmd = GetDBCommand(cmdText, conn))                
                {
                    cmd.Parameters.Add(GetDBParam("start", startDate));
                    cmd.Parameters.Add(GetDBParam("end", endDate));
                    DbDataReader reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        WindRecord wr = new WindRecord();
                        wr.Time = Convert.ToDateTime(reader["time"]);
                        wr.AverageDirection = int.Parse(reader["averageDir"].ToString());
                        wr.MaxDirection = int.Parse(reader["maxDir"].ToString());
                        wr.MinDirection = int.Parse(reader["minDir"].ToString());
                        wr.AverageSpeed = float.Parse(reader["averageSpeed"].ToString());
                        wr.MaxSpeed = float.Parse(reader["maxSpeed"].ToString());
                        wr.MinSpeed = float.Parse(reader["minSpeed"].ToString());
                        list.Add(wr);
                    }
                }
                return list;
            }
            return null;
		}

		#region # Aggregated functions
		public float GetMiddleSpeedValueBetweenDate(DateTime startDate, DateTime endDate)
		{
			/*SELECT AVG(averageSpeed) as AvgSpeed from test_data*/
			string cmdText = string.Format("SELECT AVG(averageSpeed) as AvgSpeed from test_data where time between {0} ", (isMySqlDB ? "?start and ?end" : "@start and @end"));
			using (DbConnection conn = GetDbConnection(GetDBConnString()))
			{
				float rez = -1;
				conn.Open();
				using (DbCommand cmd = GetDBCommand(cmdText, conn))
				{
					cmd.Parameters.Add(GetDBParam("start", startDate));
					cmd.Parameters.Add(GetDBParam("end", endDate));
					DbDataReader reader = cmd.ExecuteReader();
					if (reader.Read())
					{
						string s = reader["AvgSpeed"].ToString();
						if (!string.IsNullOrEmpty(s))
						{
							rez = float.Parse(s);
						}
						else
						{
							rez = 0;
						}
					}
				}
				return rez;
			}
			return -1;
		}

		public float GetTopDirectionValueBetweenDate(DateTime startDate, DateTime endDate)
		{
			/*SELECT averageDir AS TopDirection from test_data WHERE time = (select MAX(time) from test_data)*/
			// use AVG to once value to return null if not have result instead empty result
			string cmdText = string.Format("SELECT AVG(averageDir) AS TopDirection from test_data where (time = (select MAX(time) from test_data)) and (time between {0}) ", (isMySqlDB ? "?start and ?end" : "@start and @end"));
			using (DbConnection conn = GetDbConnection(GetDBConnString()))
			{
				float rez = -1;
				conn.Open();
				using (DbCommand cmd = GetDBCommand(cmdText, conn))
				{
					cmd.Parameters.Add(GetDBParam("start", startDate));
					cmd.Parameters.Add(GetDBParam("end", endDate));
					DbDataReader reader = cmd.ExecuteReader();
					if (reader.Read())
					{
						string s = reader["TopDirection"].ToString();
						if (!string.IsNullOrEmpty(s))
						{
							rez = float.Parse(s);
						}
						else
						{
							rez = 0;
						}
					}
				}
				return rez;
			}
			return -1;
		}		
		#endregion

		public WindRecord GetCurrentWind()
		{
			WindRecord currWind = new WindRecord();

			using (DbConnection conn = GetDbConnection(GetDBConnString()))
			//using (DbCommand cmd = GetDBCommand("select top 1 * from test_data order by time desc", conn))
			using (DbCommand cmd = GetDBCommand("select * from test_data order by time desc", conn))
			{
				conn.Open();
				
				//DbDataReader reader = cmd.ExecuteReader();
				DbDataReader reader = cmd.ExecuteReader(CommandBehavior.SingleRow);
				//while (reader.Read())
				if (reader.Read())
				{
					currWind.Time = Convert.ToDateTime(reader["time"]);
					currWind.AverageDirection = int.Parse(reader["averageDir"].ToString());
					currWind.MaxDirection = int.Parse(reader["maxDir"].ToString());
					currWind.MinDirection = int.Parse(reader["minDir"].ToString());
					currWind.AverageSpeed = float.Parse(reader["averageSpeed"].ToString());
					currWind.MaxSpeed = float.Parse(reader["maxSpeed"].ToString());
					currWind.MinSpeed = float.Parse(reader["minSpeed"].ToString());
				}
			}

			return currWind;
		}
	}

    public class WindRecord
    {
        DateTime _time;
        int _averageDir;
        int _maxDir;
        int _minDir;
        float _averageSpeed;
        float _maxSpeed;
        float _minSpeed;

        public DateTime Time
        {
            get { return _time; }
            set { _time = value; }
        }

        public int AverageDirection
        {
            get { return _averageDir; }
            set { _averageDir = value; }
        }

        public int MaxDirection
        {
            get { return _maxDir; }
            set { _maxDir = value; }
        }

        public int MinDirection
        {
            get { return _minDir; }
            set { _minDir = value; }
        }

        public float AverageSpeed
        {
            get { return _averageSpeed; }
            set { _averageSpeed = value; }
        }

        public float MaxSpeed
        {
            get { return _maxSpeed; }
            set { _maxSpeed = value; }
        }

        public float MinSpeed
        {
            get { return _minSpeed; }
            set { _minSpeed = value; }
        }
    }
}